//
// CreateIssueCredentialRecordRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CreateIssueCredentialRecordRequest: Codable {
    /// The validity period in seconds of the verifiable credential that will be issued.
    public var validityPeriod: Double?
    /// The unique identifier of the schema used for this credential offer.
    public var schemaId: String?
    /// The claims that will be associated with the issued verifiable credential.
    public var claims: Any?
    /// Specifies whether or not the credential should be automatically generated and issued when receiving the `CredentialRequest` from the holder. If set to `false`, a manual approval by the issuer via API call will be required for the VC to be issued.
    public var automaticIssuance: Bool?
    /// The issuer DID of the verifiable credential object.
    public var issuingDID: String
    /// The unique identifier of a DIDComm connection that already exists between the issuer and the holder, and that will be used to execute the issue credential protocol.
    public var connectionId: String

    public init(validityPeriod: Double? = nil, schemaId: String? = nil, claims: Any?, automaticIssuance: Bool? = nil, issuingDID: String, connectionId: String) {
        self.validityPeriod = validityPeriod
        self.schemaId = schemaId
        self.claims = claims
        self.automaticIssuance = automaticIssuance
        self.issuingDID = issuingDID
        self.connectionId = connectionId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case validityPeriod
        case schemaId
        case claims
        case automaticIssuance
        case issuingDID
        case connectionId
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        validityPeriod = try container.decodeIfPresent(Double.self, forKey: .validityPeriod)
        schemaId = try container.decodeIfPresent(String.self, forKey: .schemaId)
        claims = try container.decode(Any.self, forKey: .claims)
        automaticIssuance = try container.decodeIfPresent(Bool.self, forKey: .automaticIssuance)
        issuingDID = try container.decode(String.self, forKey: .issuingDID)
        connectionId = try container.decode(String.self, forKey: .connectionId)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(validityPeriod, forKey: .validityPeriod)
        try container.encodeIfPresent(schemaId, forKey: .schemaId)
        try container.encode(try JSONSerialization.data(withJSONObject: claims), forKey: .claims)
        try container.encodeIfPresent(automaticIssuance, forKey: .automaticIssuance)
        try container.encode(issuingDID, forKey: .issuingDID)
        try container.encode(connectionId, forKey: .connectionId)
    }
}
