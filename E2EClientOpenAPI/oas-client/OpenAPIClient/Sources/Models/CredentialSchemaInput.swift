//
// CredentialSchemaInput.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CredentialSchemaInput: Codable {
    /// A human-readable name for the credential schema. A piece of Metadata.
    public var name: String
    /// Denotes the revision of a given Credential Schema. It should follow semantic version convention to describe the impact of the schema evolution.
    public var version: String
    /// A human-readable description of the credential schema
    public var description: String?
    /// This field resolves to a JSON schema with details about the schema metadata that applies to the schema. A piece of Metadata.
    public var type: String
    /// Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata
    public var schema: Any?
    /// Tokens that allow to lookup and filter the credential schema records.
    public var tags: [String]?
    /// DID of the identity which authored the credential schema. A piece of Metadata.
    public var author: String

    public init(name: String, version: String, description: String? = nil, type: String, schema: Any?, tags: [String]? = nil, author: String) {
        self.name = name
        self.version = version
        self.description = description
        self.type = type
        self.schema = schema
        self.tags = tags
        self.author = author
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case version
        case description
        case type
        case schema
        case tags
        case author
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        name = try container.decode(String.self, forKey: .name)
        version = try container.decode(String.self, forKey: .version)
        description = try container.decodeIfPresent(String.self, forKey: .description)
        type = try container.decode(String.self, forKey: .type)
        schema = try container.decode(Any.self, forKey: .schema)
        tags = try container.decodeIfPresent([String].self, forKey: .tags)
        author = try container.decode(String.self, forKey: .author)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(version, forKey: .version)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encode(type, forKey: .type)
        try container.encode(try JSONSerialization.data(withJSONObject: schema), forKey: .schema)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encode(author, forKey: .author)
    }
}
