//
// PresentationStatus.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct PresentationStatus: Codable {
    public enum Role: String, Codable, CaseIterable {
        case verifier = "Verifier"
        case prover = "Prover"
    }
    public enum Status: String, Codable, CaseIterable {
        case requestPending = "RequestPending"
        case requestSent = "RequestSent"
        case requestReceived = "RequestReceived"
        case requestRejected = "RequestRejected"
        case presentationPending = "PresentationPending"
        case presentationGenerated = "PresentationGenerated"
        case presentationSent = "PresentationSent"
        case presentationReceived = "PresentationReceived"
        case presentationVerified = "PresentationVerified"
        case presentationAccepted = "PresentationAccepted"
        case presentationRejected = "PresentationRejected"
        case problemReportPending = "ProblemReportPending"
        case problemReportSent = "ProblemReportSent"
        case problemReportReceived = "ProblemReportReceived"
    }
    /// The unique identifier of the presentation record.
    public var presentationId: String
    /// The unique identifier of the thread this presentation record belongs to. The value will identical on both sides of the presentation flow (verifier and prover)
    public var thid: String
    /// The role played by the Prism agent in the proof presentation flow.
    public var role: Role
    /// The current state of the proof presentation record.
    public var status: Status
    /// The type of proofs requested in the context of this proof presentation request (e.g., VC schema, trusted issuers, etc.)
    public var proofs: [ProofRequestAux]?
    /// The list of proofs presented by the prover to the verifier.
    public var data: [String]?
    /// The unique identifier of an established connection between the verifier and the prover.
    public var connectionId: String?

    public init(presentationId: String, thid: String, role: Role, status: Status, proofs: [ProofRequestAux]? = nil, data: [String]? = nil, connectionId: String? = nil) {
        self.presentationId = presentationId
        self.thid = thid
        self.role = role
        self.status = status
        self.proofs = proofs
        self.data = data
        self.connectionId = connectionId
    }
}
