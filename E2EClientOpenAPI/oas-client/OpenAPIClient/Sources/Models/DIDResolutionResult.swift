//
// DIDResolutionResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct DIDResolutionResult: Codable {
    /// The JSON-LD context for the DID resolution result.
    public var context: String
    public var didDocument: DIDDocument?
    public var didDocumentMetadata: DIDDocumentMetadata
    public var didResolutionMetadata: DIDResolutionMetadata

    public init(context: String, didDocument: DIDDocument? = nil, didDocumentMetadata: DIDDocumentMetadata, didResolutionMetadata: DIDResolutionMetadata) {
        self.context = context
        self.didDocument = didDocument
        self.didDocumentMetadata = didDocumentMetadata
        self.didResolutionMetadata = didResolutionMetadata
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case context = "@context"
        case didDocument
        case didDocumentMetadata
        case didResolutionMetadata
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        context = try container.decode(String.self, forKey: .context)
        didDocument = try container.decodeIfPresent(DIDDocument.self, forKey: .didDocument)
        didDocumentMetadata = try container.decode(DIDDocumentMetadata.self, forKey: .didDocumentMetadata)
        didResolutionMetadata = try container.decode(DIDResolutionMetadata.self, forKey: .didResolutionMetadata)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(context, forKey: .context)
        try container.encodeIfPresent(didDocument, forKey: .didDocument)
        try container.encode(didDocumentMetadata, forKey: .didDocumentMetadata)
        try container.encode(didResolutionMetadata, forKey: .didResolutionMetadata)
    }
}
