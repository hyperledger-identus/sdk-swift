//
// ConnectionsManagementAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class ConnectionsManagementAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "http://localhost")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum AcceptConnectionInvitationError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "AcceptConnectionInvitationError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "AcceptConnectionInvitationError: Internal server error: \(object)"
            }
        }
    }

    /// Accepts an Out of Band invitation.
    /// - POST /connection-invitations
    /// -  Accepts an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation, generates a new Peer DID, and submits a Connection Request to the inviter. It returns a connection object in `ConnectionRequestPending` state, until the Connection Request is eventually sent to the inviter by the prism-agent's background process. The connection object state will then automatically move to `ConnectionRequestSent`. 
    /// - parameter acceptConnectionInvitationRequest: (body) The request used by an invitee to accept a connection invitation received from an inviter, using out-of-band mechanism. 
    /// - returns: AnyPublisher<Connection, Error> 
    open func acceptConnectionInvitation(acceptConnectionInvitationRequest: AcceptConnectionInvitationRequest) -> AnyPublisher<Connection, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/connection-invitations"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(acceptConnectionInvitationRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Connection, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return AcceptConnectionInvitationError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return AcceptConnectionInvitationError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(Connection.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum CreateConnectionError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "CreateConnectionError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "CreateConnectionError: Internal server error: \(object)"
            }
        }
    }

    /// Creates a new connection record and returns an Out of Band invitation.
    /// - POST /connections
    /// -  Generates a new Peer DID and creates an [Out of Band 2.0](https://identity.foundation/didcomm-messaging/spec/v2.0/#out-of-band-messages) invitation. It returns a new connection record in `InvitationGenerated` state. The request body may contain a `label` that can be used as a human readable alias for the connection, for example `{'label': \"Bob\"}` 
    /// - parameter createConnectionRequest: (body) JSON object required for the connection creation 
    /// - returns: AnyPublisher<Connection, Error> 
    open func createConnection(createConnectionRequest: CreateConnectionRequest) -> AnyPublisher<Connection, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/connections"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(createConnectionRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Connection, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return CreateConnectionError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return CreateConnectionError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(Connection.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetConnectionError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Resource could not be found
        case code404Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "GetConnectionError: Invalid request parameters: \(object)"
            case .code404Error(let object):
                return "GetConnectionError: Resource could not be found: \(object)"
            case .code500Error(let object):
                return "GetConnectionError: Internal server error: \(object)"
            }
        }
    }

    /// Gets an existing connection record by its unique identifier.
    /// - GET /connections/{connectionId}
    /// - Gets an existing connection record by its unique identifier
    /// - parameter connectionId: (path) The unique identifier of the connection record. 
    /// - returns: AnyPublisher<Connection, Error> 
    open func getConnection(connectionId: UUID) -> AnyPublisher<Connection, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/connections/{connectionId}"
                path = path.replacingOccurrences(of: "{connectionId}", with: connectionId.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Connection, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetConnectionError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetConnectionError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetConnectionError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(Connection.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetConnectionsError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "GetConnectionsError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "GetConnectionsError: Internal server error: \(object)"
            }
        }
    }

    /// Gets the list of connection records.
    /// - GET /connections
    /// - Get the list of connection records paginated
    /// - parameter offset: (query)  (optional)
    /// - parameter limit: (query)  (optional)
    /// - parameter thid: (query) The thid of a DIDComm communication. (optional)
    /// - returns: AnyPublisher<ConnectionsPage, Error> 
    open func getConnections(offset: Int? = nil, limit: Int? = nil, thid: String? = nil) -> AnyPublisher<ConnectionsPage, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/connections"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: "\(offset)")) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: "\(limit)")) } 
                if let thid = thid { queryItems.append(URLQueryItem(name: "thid", value: thid)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<ConnectionsPage, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetConnectionsError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetConnectionsError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(ConnectionsPage.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
