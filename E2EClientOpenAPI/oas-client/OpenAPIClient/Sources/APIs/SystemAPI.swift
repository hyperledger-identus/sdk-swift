//
// SystemAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class SystemAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "http://localhost")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum SystemHealthError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "SystemHealthError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "SystemHealthError: Internal server error: \(object)"
            }
        }
    }

    /// As a system user, check the health status of the running service
    /// - GET /_system/health
    /// - Returns the health info object of the running service
    /// - returns: AnyPublisher<HealthInfo, Error> 
    open func systemHealth() -> AnyPublisher<HealthInfo, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/_system/health"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<HealthInfo, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return SystemHealthError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return SystemHealthError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(HealthInfo.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum SystemMetricsError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "SystemMetricsError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "SystemMetricsError: Internal server error: \(object)"
            }
        }
    }

    /// As a system user, check the health status of the running service
    /// - GET /_system/metrics
    /// - Returns the health info object of the running service
    /// - returns: AnyPublisher<String, Error> 
    open func systemMetrics() -> AnyPublisher<String, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/_system/metrics"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<String, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return SystemMetricsError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return SystemMetricsError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(String.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
