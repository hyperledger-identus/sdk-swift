//
// IssueCredentialsProtocolAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class IssueCredentialsProtocolAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "http://localhost")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum AcceptCredentialOfferError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Resource could not be found
        case code404Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "AcceptCredentialOfferError: Invalid request parameters: \(object)"
            case .code404Error(let object):
                return "AcceptCredentialOfferError: Resource could not be found: \(object)"
            case .code500Error(let object):
                return "AcceptCredentialOfferError: Internal server error: \(object)"
            }
        }
    }

    /// As a holder, accepts a credential offer received from an issuer.
    /// - POST /issue-credentials/records/{recordId}/accept-offer
    /// - Accepts a credential offer received from a VC issuer and sends back a credential request.
    /// - parameter recordId: (path) The unique identifier of the issue credential record. 
    /// - parameter acceptCredentialOfferRequest: (body) The accept credential offer request object. 
    /// - returns: AnyPublisher<IssueCredentialRecord, Error> 
    open func acceptCredentialOffer(recordId: String, acceptCredentialOfferRequest: AcceptCredentialOfferRequest) -> AnyPublisher<IssueCredentialRecord, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/issue-credentials/records/{recordId}/accept-offer"
                path = path.replacingOccurrences(of: "{recordId}", with: recordId)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(acceptCredentialOfferRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<IssueCredentialRecord, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return AcceptCredentialOfferError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return AcceptCredentialOfferError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return AcceptCredentialOfferError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(IssueCredentialRecord.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum CreateCredentialOfferError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "CreateCredentialOfferError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "CreateCredentialOfferError: Internal server error: \(object)"
            }
        }
    }

    /// As a credential issuer, create a new credential offer to be sent to a holder.
    /// - POST /issue-credentials/credential-offers
    /// - Creates a new credential offer in the database
    /// - parameter createIssueCredentialRecordRequest: (body) The credential offer object. 
    /// - returns: AnyPublisher<IssueCredentialRecord, Error> 
    open func createCredentialOffer(createIssueCredentialRecordRequest: CreateIssueCredentialRecordRequest) -> AnyPublisher<IssueCredentialRecord, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/issue-credentials/credential-offers"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(createIssueCredentialRecordRequest)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<IssueCredentialRecord, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return CreateCredentialOfferError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return CreateCredentialOfferError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(IssueCredentialRecord.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetCredentialRecordError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Resource could not be found
        case code404Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "GetCredentialRecordError: Invalid request parameters: \(object)"
            case .code404Error(let object):
                return "GetCredentialRecordError: Resource could not be found: \(object)"
            case .code500Error(let object):
                return "GetCredentialRecordError: Internal server error: \(object)"
            }
        }
    }

    /// Gets an existing issue credential record by its unique identifier.
    /// - GET /issue-credentials/records/{recordId}
    /// - Gets issue credential records by record id
    /// - parameter recordId: (path) The unique identifier of the issue credential record. 
    /// - returns: AnyPublisher<IssueCredentialRecord, Error> 
    open func getCredentialRecord(recordId: String) -> AnyPublisher<IssueCredentialRecord, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/issue-credentials/records/{recordId}"
                path = path.replacingOccurrences(of: "{recordId}", with: recordId)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<IssueCredentialRecord, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetCredentialRecordError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetCredentialRecordError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetCredentialRecordError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(IssueCredentialRecord.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetCredentialRecordsError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "GetCredentialRecordsError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "GetCredentialRecordsError: Internal server error: \(object)"
            }
        }
    }

    /// Gets the list of issue credential records.
    /// - GET /issue-credentials/records
    /// - Get the list of issue credential records paginated
    /// - parameter offset: (query)  (optional)
    /// - parameter limit: (query)  (optional)
    /// - parameter thid: (query) The thid of a DIDComm communication. (optional)
    /// - returns: AnyPublisher<IssueCredentialRecordPage, Error> 
    open func getCredentialRecords(offset: Int? = nil, limit: Int? = nil, thid: String? = nil) -> AnyPublisher<IssueCredentialRecordPage, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/issue-credentials/records"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: "\(offset)")) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: "\(limit)")) } 
                if let thid = thid { queryItems.append(URLQueryItem(name: "thid", value: thid)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<IssueCredentialRecordPage, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetCredentialRecordsError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetCredentialRecordsError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(IssueCredentialRecordPage.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum IssueCredentialError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Resource could not be found
        case code404Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "IssueCredentialError: Invalid request parameters: \(object)"
            case .code404Error(let object):
                return "IssueCredentialError: Resource could not be found: \(object)"
            case .code500Error(let object):
                return "IssueCredentialError: Internal server error: \(object)"
            }
        }
    }

    /// As an issuer, issues the verifiable credential related to the specified record.
    /// - POST /issue-credentials/records/{recordId}/issue-credential
    /// - Sends credential to a holder (holder DID is specified in credential as subjectDid). Credential is constructed from the credential records found by credential id.
    /// - parameter recordId: (path) The unique identifier of the issue credential record. 
    /// - returns: AnyPublisher<IssueCredentialRecord, Error> 
    open func issueCredential(recordId: String) -> AnyPublisher<IssueCredentialRecord, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/issue-credentials/records/{recordId}/issue-credential"
                path = path.replacingOccurrences(of: "{recordId}", with: recordId)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<IssueCredentialRecord, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return IssueCredentialError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return IssueCredentialError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return IssueCredentialError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(IssueCredentialRecord.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
