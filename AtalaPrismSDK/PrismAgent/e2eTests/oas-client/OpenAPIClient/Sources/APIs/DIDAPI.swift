//
// DIDAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class DIDAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "http://localhost")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum GetDIDError: Error, CustomStringConvertible {
        // 
        case code400Error(DIDResolutionResult)
        // 
        case code404Error(DIDResolutionResult)
        // 
        case code406Error(DIDResolutionResult)
        // 
        case code410Error(DIDResolutionResult)
        // 
        case code500Error(DIDResolutionResult)
        // 
        case code501Error(DIDResolutionResult)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "GetDIDError: : \(object)"
            case .code404Error(let object):
                return "GetDIDError: : \(object)"
            case .code406Error(let object):
                return "GetDIDError: : \(object)"
            case .code410Error(let object):
                return "GetDIDError: : \(object)"
            case .code500Error(let object):
                return "GetDIDError: : \(object)"
            case .code501Error(let object):
                return "GetDIDError: : \(object)"
            }
        }
    }

    /// Resolve Prism DID to a W3C representation
    /// - GET /dids/{didRef}
    /// - Resolve Prism DID to a W3C DID document representation. The response can be the [DID resolution result](https://w3c-ccg.github.io/did-resolution/#did-resolution-result) or [DID document representation](https://www.w3.org/TR/did-core/#representations) depending on the `Accept` request header. The response is implemented according to [resolver HTTP binding](https://w3c-ccg.github.io/did-resolution/#bindings-https) in the DID resolution spec. 
    /// - parameter didRef: (path) Prism DID according to [the Prism DID method syntax](https://github.com/input-output-hk/prism-did-method-spec/blob/main/w3c-spec/PRISM-method.md#prism-did-method-syntax) 
    /// - returns: AnyPublisher<DIDResolutionResult, Error> 
    open func getDID(didRef: String) -> AnyPublisher<DIDResolutionResult, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/dids/{didRef}"
                path = path.replacingOccurrences(of: "{didRef}", with: didRef)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<DIDResolutionResult, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(DIDResolutionResult.self, from: transportError.data)
                            return GetDIDError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(DIDResolutionResult.self, from: transportError.data)
                            return GetDIDError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 406 {
                        do {
                            let error = try self.decoder.decode(DIDResolutionResult.self, from: transportError.data)
                            return GetDIDError.code406Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 410 {
                        do {
                            let error = try self.decoder.decode(DIDResolutionResult.self, from: transportError.data)
                            return GetDIDError.code410Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(DIDResolutionResult.self, from: transportError.data)
                            return GetDIDError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 501 {
                        do {
                            let error = try self.decoder.decode(DIDResolutionResult.self, from: transportError.data)
                            return GetDIDError.code501Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(DIDResolutionResult.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
