//
// VerificationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech

import Foundation
import Combine
import OpenAPITransport


open class VerificationAPI {
    private let transport: OpenAPITransport
    public var encoder: JSONEncoder = {
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .formatted(OpenISO8601DateFormatter())
        return encoder
    }()
    public var decoder: JSONDecoder = {
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .formatted(OpenISO8601DateFormatter())
        return decoder
    }()
    public var baseURL = URL(string: "http://localhost")

    public init(_ transport: OpenAPITransport) {
        self.transport = transport
    }

    public enum CreateVerificationPolicyError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "CreateVerificationPolicyError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "CreateVerificationPolicyError: Internal server error: \(object)"
            }
        }
    }

    /// Create the new verification policy
    /// - POST /verification/policies
    /// - Create the new verification policy
    /// - parameter verificationPolicyInput: (body) Create verification policy object 
    /// - returns: AnyPublisher<VerificationPolicy, Error> 
    open func createVerificationPolicy(verificationPolicyInput: VerificationPolicyInput) -> AnyPublisher<VerificationPolicy, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/verification/policies"
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "POST"
                request.httpBody = try self.encoder.encode(verificationPolicyInput)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VerificationPolicy, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return CreateVerificationPolicyError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return CreateVerificationPolicyError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VerificationPolicy.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum DeleteVerificationPolicyByIdError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Resource could not be found
        case code404Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "DeleteVerificationPolicyByIdError: Invalid request parameters: \(object)"
            case .code404Error(let object):
                return "DeleteVerificationPolicyByIdError: Resource could not be found: \(object)"
            case .code500Error(let object):
                return "DeleteVerificationPolicyByIdError: Internal server error: \(object)"
            }
        }
    }

    /// Deleted the verification policy by id
    /// - DELETE /verification/policies/{id}
    /// - Delete the verification policy by id
    /// - parameter id: (path) Delete the verification policy by id 
    /// - returns: AnyPublisher<Void, Error> 
    open func deleteVerificationPolicyById(id: UUID) -> AnyPublisher<Void, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/verification/policies/{id}"
                path = path.replacingOccurrences(of: "{id}", with: id.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "DELETE"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<Void, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return DeleteVerificationPolicyByIdError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return DeleteVerificationPolicyByIdError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return DeleteVerificationPolicyByIdError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    return ()
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum GetVerificationPolicyByIdError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Resource could not be found
        case code404Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "GetVerificationPolicyByIdError: Invalid request parameters: \(object)"
            case .code404Error(let object):
                return "GetVerificationPolicyByIdError: Resource could not be found: \(object)"
            case .code500Error(let object):
                return "GetVerificationPolicyByIdError: Internal server error: \(object)"
            }
        }
    }

    /// Fetch the verification policy by id
    /// - GET /verification/policies/{id}
    /// - Get the verification policy by id
    /// - parameter id: (path) Get the verification policy by id 
    /// - returns: AnyPublisher<VerificationPolicy, Error> 
    open func getVerificationPolicyById(id: UUID) -> AnyPublisher<VerificationPolicy, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/verification/policies/{id}"
                path = path.replacingOccurrences(of: "{id}", with: id.uuidString)
                let url = baseURL.appendingPathComponent(path)
                let components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VerificationPolicy, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetVerificationPolicyByIdError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetVerificationPolicyByIdError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return GetVerificationPolicyByIdError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VerificationPolicy.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum LookupVerificationPoliciesByQueryError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "LookupVerificationPoliciesByQueryError: Invalid request parameters: \(object)"
            case .code500Error(let object):
                return "LookupVerificationPoliciesByQueryError: Internal server error: \(object)"
            }
        }
    }

    /// Lookup verification policies by query
    /// - GET /verification/policies
    /// - Lookup verification policies by `name`, and control the pagination by `offset` and `limit` parameters
    /// - parameter name: (query)  (optional)
    /// - parameter offset: (query)  (optional)
    /// - parameter limit: (query)  (optional)
    /// - parameter order: (query)  (optional)
    /// - returns: AnyPublisher<VerificationPolicyPage, Error> 
    open func lookupVerificationPoliciesByQuery(name: String? = nil, offset: Int? = nil, limit: Int? = nil, order: String? = nil) -> AnyPublisher<VerificationPolicyPage, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                let path = "/verification/policies"
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                if let name = name { queryItems.append(URLQueryItem(name: "name", value: name)) } 
                if let offset = offset { queryItems.append(URLQueryItem(name: "offset", value: "\(offset)")) } 
                if let limit = limit { queryItems.append(URLQueryItem(name: "limit", value: "\(limit)")) } 
                if let order = order { queryItems.append(URLQueryItem(name: "order", value: order)) } 
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "GET"
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VerificationPolicyPage, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return LookupVerificationPoliciesByQueryError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return LookupVerificationPoliciesByQueryError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VerificationPolicyPage.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }

    public enum UpdateVerificationPolicyError: Error, CustomStringConvertible {
        // Invalid request parameters
        case code400Error(ErrorResponse)
        // Resource could not be found
        case code404Error(ErrorResponse)
        // Internal server error
        case code500Error(ErrorResponse)

        public var description: String {
            switch self {
            case .code400Error(let object):
                return "UpdateVerificationPolicyError: Invalid request parameters: \(object)"
            case .code404Error(let object):
                return "UpdateVerificationPolicyError: Resource could not be found: \(object)"
            case .code500Error(let object):
                return "UpdateVerificationPolicyError: Internal server error: \(object)"
            }
        }
    }

    /// Update the verification policy object by id
    /// - PUT /verification/policies/{id}
    /// - Update the verification policy entry
    /// - parameter id: (path)  
    /// - parameter nonce: (query) Nonce of the previous VerificationPolicy 
    /// - parameter verificationPolicyInput: (body) Update verification policy object 
    /// - returns: AnyPublisher<VerificationPolicy, Error> 
    open func updateVerificationPolicy(id: UUID, nonce: Int, verificationPolicyInput: VerificationPolicyInput) -> AnyPublisher<VerificationPolicy, Error> {
        Deferred {
            Result<URLRequest, Error> {
                guard let baseURL = self.transport.baseURL ?? self.baseURL else {
                    throw OpenAPITransportError.badURLError()
                }
                var path = "/verification/policies/{id}"
                path = path.replacingOccurrences(of: "{id}", with: id.uuidString)
                let url = baseURL.appendingPathComponent(path)
                var components = URLComponents(url: url, resolvingAgainstBaseURL: false)
                var queryItems: [URLQueryItem] = []
                queryItems.append(URLQueryItem(name: "nonce", value: "\(nonce)"))
                components?.queryItems = queryItems
                guard let requestURL = components?.url else {
                    throw OpenAPITransportError.badURLError()
                }
                var request = URLRequest(url: requestURL)
                request.httpMethod = "PUT"
                request.httpBody = try self.encoder.encode(verificationPolicyInput)
                request.setValue("application/json", forHTTPHeaderField: "Content-Type")
                return request
            }.publisher
        }.flatMap { request -> AnyPublisher<VerificationPolicy, Error> in 
            return self.transport.send(request: request)
                .mapError { transportError -> Error in 
                    if transportError.statusCode == 400 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return UpdateVerificationPolicyError.code400Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 404 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return UpdateVerificationPolicyError.code404Error(error)
                        } catch {
                            return error
                        }
                    }
                    if transportError.statusCode == 500 {
                        do {
                            let error = try self.decoder.decode(ErrorResponse.self, from: transportError.data)
                            return UpdateVerificationPolicyError.code500Error(error)
                        } catch {
                            return error
                        }
                    }
                    return transportError
                }
                .tryMap { response in
                    try self.decoder.decode(VerificationPolicy.self, from: response.data)
                }
                .eraseToAnyPublisher()
        }.eraseToAnyPublisher()
    }
}
