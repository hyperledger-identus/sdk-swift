//
// Connection.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct Connection: Codable {
    public enum Role: String, Codable, CaseIterable {
        case inviter = "Inviter"
        case invitee = "Invitee"
    }
    public enum State: String, Codable, CaseIterable {
        case invitationGenerated = "InvitationGenerated"
        case invitationReceived = "InvitationReceived"
        case connectionRequestPending = "ConnectionRequestPending"
        case connectionRequestSent = "ConnectionRequestSent"
        case connectionRequestReceived = "ConnectionRequestReceived"
        case connectionResponsePending = "ConnectionResponsePending"
        case connectionResponseSent = "ConnectionResponseSent"
        case connectionResponseReceived = "ConnectionResponseReceived"
        case problemReportPending = "ProblemReportPending"
        case problemReportSent = "ProblemReportSent"
        case problemReportReceived = "ProblemReportReceived"
    }
    /// The unique identifier of the connection.
    public var connectionId: UUID
    /// The unique identifier of the thread this connection record belongs to. The value will identical on both sides of the connection (inviter and invitee)
    public var thid: String
    /// A human readable alias for the connection.
    public var label: String?
    /// The DID representing me as the inviter or invitee in this specific connection.
    public var myDid: String?
    /// The DID representing the other peer as the an inviter or invitee in this specific connection.
    public var theirDid: String?
    /// The role played by the Prism agent in the connection flow.
    public var role: Role
    /// The current state of the connection protocol execution.
    public var state: State
    public var invitation: ConnectionInvitation
    /// The date and time the connection record was created.
    public var createdAt: Date
    /// The date and time the connection record was last updated.
    public var updatedAt: Date?
    /// The reference to the connection resource.
    public var _self: String
    /// The type of object returned. In this case a `Connection`.
    public var kind: String

    public init(connectionId: UUID, thid: String, label: String? = nil, myDid: String? = nil, theirDid: String? = nil, role: Role, state: State, invitation: ConnectionInvitation, createdAt: Date, updatedAt: Date? = nil, _self: String, kind: String) {
        self.connectionId = connectionId
        self.thid = thid
        self.label = label
        self.myDid = myDid
        self.theirDid = theirDid
        self.role = role
        self.state = state
        self.invitation = invitation
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self._self = _self
        self.kind = kind
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case connectionId
        case thid
        case label
        case myDid
        case theirDid
        case role
        case state
        case invitation
        case createdAt
        case updatedAt
        case _self = "self"
        case kind
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        connectionId = try container.decode(UUID.self, forKey: .connectionId)
        thid = try container.decode(String.self, forKey: .thid)
        label = try container.decodeIfPresent(String.self, forKey: .label)
        myDid = try container.decodeIfPresent(String.self, forKey: .myDid)
        theirDid = try container.decodeIfPresent(String.self, forKey: .theirDid)
        role = try container.decode(Role.self, forKey: .role)
        state = try container.decode(State.self, forKey: .state)
        invitation = try container.decode(ConnectionInvitation.self, forKey: .invitation)
        createdAt = try container.decode(Date.self, forKey: .createdAt)
        updatedAt = try container.decodeIfPresent(Date.self, forKey: .updatedAt)
        _self = try container.decode(String.self, forKey: ._self)
        kind = try container.decode(String.self, forKey: .kind)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(connectionId, forKey: .connectionId)
        try container.encode(thid, forKey: .thid)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(myDid, forKey: .myDid)
        try container.encodeIfPresent(theirDid, forKey: .theirDid)
        try container.encode(role, forKey: .role)
        try container.encode(state, forKey: .state)
        try container.encode(invitation, forKey: .invitation)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encode(_self, forKey: ._self)
        try container.encode(kind, forKey: .kind)
    }
}
