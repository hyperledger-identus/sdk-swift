//
// VerificationPolicy.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct VerificationPolicy: Codable {
    public var _self: String
    public var kind: String
    public var id: UUID
    public var nonce: Int
    public var name: String
    public var description: String
    public var createdAt: Date
    public var updatedAt: Date
    public var constraints: [VerificationPolicyConstraint]?

    public init(_self: String, kind: String, id: UUID, nonce: Int, name: String, description: String, createdAt: Date, updatedAt: Date, constraints: [VerificationPolicyConstraint]? = nil) {
        self._self = _self
        self.kind = kind
        self.id = id
        self.nonce = nonce
        self.name = name
        self.description = description
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.constraints = constraints
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case _self = "self"
        case kind
        case id
        case nonce
        case name
        case description
        case createdAt
        case updatedAt
        case constraints
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        _self = try container.decode(String.self, forKey: ._self)
        kind = try container.decode(String.self, forKey: .kind)
        id = try container.decode(UUID.self, forKey: .id)
        nonce = try container.decode(Int.self, forKey: .nonce)
        name = try container.decode(String.self, forKey: .name)
        description = try container.decode(String.self, forKey: .description)
        createdAt = try container.decode(Date.self, forKey: .createdAt)
        updatedAt = try container.decode(Date.self, forKey: .updatedAt)
        constraints = try container.decodeIfPresent([VerificationPolicyConstraint].self, forKey: .constraints)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(_self, forKey: ._self)
        try container.encode(kind, forKey: .kind)
        try container.encode(id, forKey: .id)
        try container.encode(nonce, forKey: .nonce)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(constraints, forKey: .constraints)
    }
}
