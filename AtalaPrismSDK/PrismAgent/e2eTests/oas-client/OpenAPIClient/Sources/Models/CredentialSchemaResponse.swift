//
// CredentialSchemaResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct CredentialSchemaResponse: Codable {
    /// Globally unique id of the credential schema.It's composed from the bytes of the string that contain the `author`, `name`, and `version` values.The string format looks like the resource identifier: `author`/`id`?version=`version`
    public var guid: UUID
    /// A locally unique identifier to address the schema. UUID is generated by the backend.
    public var id: String
    /// Resource id of the credential schema. Contains the `author`'s DID, `id` and `version` fields.
    public var longId: String?
    /// A human-readable name for the credential schema. A piece of Metadata.
    public var name: String
    /// Denotes the revision of a given Credential Schema. It should follow semantic version convention to describe the impact of the schema evolution.
    public var version: String
    /// Tokens that allow to lookup and filter the credential schema records.
    public var tags: [String]?
    /// A human-readable description of the credential schema
    public var description: String
    /// This field resolves to a JSON schema with details about the schema metadata that applies to the schema. A piece of Metadata.
    public var type: String
    /// Valid JSON Schema where the Credential Schema data fields are defined. A piece of Metadata
    public var schema: Any?
    /// DID of the identity which authored the credential schema. A piece of Metadata.
    public var author: String
    /// [RFC3339](https://www.rfc-editor.org/rfc/rfc3339) date on which the credential schema was created. A piece of Metadata.
    public var authored: Date
    public var proof: Proof?
    /// A string that identifies the type of resource being returned in the response.
    public var kind: String
    /// The URL that uniquely identifies the resource being returned in the response.
    public var _self: String

    public init(guid: UUID, id: String, longId: String? = nil, name: String, version: String, tags: [String]? = nil, description: String, type: String, schema: Any?, author: String, authored: Date, proof: Proof? = nil, kind: String, _self: String) {
        self.guid = guid
        self.id = id
        self.longId = longId
        self.name = name
        self.version = version
        self.tags = tags
        self.description = description
        self.type = type
        self.schema = schema
        self.author = author
        self.authored = authored
        self.proof = proof
        self.kind = kind
        self._self = _self
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case guid
        case id
        case longId
        case name
        case version
        case tags
        case description
        case type
        case schema
        case author
        case authored
        case proof
        case kind
        case _self = "self"
    }

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: CodingKeys.self)
        guid = try container.decode(UUID.self, forKey: .guid)
        id = try container.decode(String.self, forKey: .id)
        longId = try container.decodeIfPresent(String.self, forKey: .longId)
        name = try container.decode(String.self, forKey: .name)
        version = try container.decode(String.self, forKey: .version)
        tags = try container.decodeIfPresent([String].self, forKey: .tags)
        description = try container.decode(String.self, forKey: .description)
        type = try container.decode(String.self, forKey: .type)
        schema = try container.decode(Any.self, forKey: .schema)
        author = try container.decode(String.self, forKey: .author)
        authored = try container.decode(Date.self, forKey: .authored)
        proof = try container.decodeIfPresent(Proof.self, forKey: .proof)
        kind = try container.decode(String.self, forKey: .kind)
        _self = try container.decode(String.self, forKey: ._self)
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(guid, forKey: .guid)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(longId, forKey: .longId)
        try container.encode(name, forKey: .name)
        try container.encode(version, forKey: .version)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encode(description, forKey: .description)
        try container.encode(type, forKey: .type)
        try container.encode(try JSONSerialization.data(withJSONObject: schema), forKey: .schema)
        try container.encode(author, forKey: .author)
        try container.encode(authored, forKey: .authored)
        try container.encodeIfPresent(proof, forKey: .proof)
        try container.encode(kind, forKey: .kind)
        try container.encode(_self, forKey: ._self)
    }
}
